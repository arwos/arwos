// Code generated by goppy-cli for goppy.orm. DO NOT EDIT.
package settings

import (
	"context"
	time "time"

	"go.osspkg.com/goppy/v2/orm"
)

type RepositoryModels struct {
	orm        orm.ORM
	rtag, wtag string
}

func newRepositoryModels(orm orm.ORM) *RepositoryModels {
	return &RepositoryModels{
		orm:  orm,
		rtag: "slave",
		wtag: "master",
	}
}

func (v *RepositoryModels) TagSlave() orm.Stmt {
	return v.orm.Tag(v.rtag)
}

func (v *RepositoryModels) TagMaster() orm.Stmt {
	return v.orm.Tag(v.wtag)
}

const sqlPluginsCreatePluginModel = `INSERT INTO "plugins" ("pkg", "ver", "hash", "active", "meta", "created_at", "updated_at") 
			VALUES ($1, $2, $3, $4, $5, $6, $7) 
			RETURNING ("id");
`

func (v *RepositoryModels) CreatePluginModel(ctx context.Context, m *PluginModel) error {
	m.CreatedAt = time.Now()
	m.UpdatedAt = time.Now()

	return v.orm.Tag(v.wtag).Query(ctx, "plugins_create", func(q orm.Querier) {
		q.SQL(
			sqlPluginsCreatePluginModel,
			m.Package, m.Version, m.Hash, m.Active, m.Meta, m.CreatedAt, m.UpdatedAt,
		)
		q.Bind(func(bind orm.Scanner) error {
			return bind.Scan(&m.Id)
		})
	})
}

const sqlPluginsUpdatePluginModel = `UPDATE "plugins" SET 
			"pkg" = $1, "ver" = $2, "hash" = $3, "active" = $4, "meta" = $5, "created_at" = $6, "updated_at" = $7
			 WHERE "id" = $8;
`

func (v *RepositoryModels) UpdatePluginModel(ctx context.Context, m *PluginModel) error {
	m.UpdatedAt = time.Now()

	return v.orm.Tag(v.wtag).Exec(ctx, "plugins_update", func(e orm.Executor) {
		e.SQL(sqlPluginsUpdatePluginModel)
		e.Params(m.Package, m.Version, m.Hash, m.Active, m.Meta, m.CreatedAt, m.UpdatedAt, m.Id)
	})
}

const sqlPluginsDeletePluginModel = `DELETE FROM "plugins"
			 WHERE "id" = $1;
`

func (v *RepositoryModels) DeletePluginModel(ctx context.Context, pk int64) error {
	return v.orm.Tag(v.wtag).Exec(ctx, "plugins_delete", func(e orm.Executor) {
		e.SQL(sqlPluginsDeletePluginModel)
		e.Params(pk)
	})
}

const sqlPluginsReadPluginModelAll = `SELECT "pkg", "ver", "hash", "active", "meta", "created_at", "updated_at"
			 FROM "plugins";
`

func (v *RepositoryModels) ReadPluginModelAll(ctx context.Context) ([]PluginModel,
	error) {
	result := make([]PluginModel, 0, 2)
	err := v.orm.Tag(v.rtag).Query(ctx, "plugins_read_all", func(q orm.Querier) {
		q.SQL(sqlPluginsReadPluginModelAll)
		q.Bind(func(bind orm.Scanner) error {
			m := PluginModel{}
			if e := bind.Scan(&m.Package, &m.Version, &m.Hash, &m.Active, &m.Meta, &m.CreatedAt, &m.UpdatedAt); e != nil {
				return e
			}
			result = append(result, m)
			return nil
		})
	})
	if err != nil {
		return nil, err
	}
	return result, nil
}

const sqlPluginsReadPluginModelById = `SELECT "pkg", "ver", "hash", "active", "meta", "created_at", "updated_at"
			 FROM "plugins"
			 WHERE "id" = ANY($1);
`

func (v *RepositoryModels) ReadPluginModelById(
	ctx context.Context, args ...int64,
) ([]PluginModel, error) {
	result := make([]PluginModel, 0, 2)
	err := v.orm.Tag(v.rtag).Query(ctx, "plugins_read_by_id", func(q orm.Querier) {
		q.SQL(sqlPluginsReadPluginModelById, args)
		q.Bind(func(bind orm.Scanner) error {
			m := PluginModel{}
			if e := bind.Scan(&m.Package, &m.Version, &m.Hash, &m.Active, &m.Meta, &m.CreatedAt, &m.UpdatedAt); e != nil {
				return e
			}
			result = append(result, m)
			return nil
		})
	})
	if err != nil {
		return nil, err
	}
	return result, nil
}

const sqlPluginsReadPluginModelByPackage = `SELECT "pkg", "ver", "hash", "active", "meta", "created_at", "updated_at"
			 FROM "plugins"
			 WHERE "pkg" = ANY($1);
`

func (v *RepositoryModels) ReadPluginModelByPackage(
	ctx context.Context, args ...string,
) ([]PluginModel, error) {
	result := make([]PluginModel, 0, 2)
	err := v.orm.Tag(v.rtag).Query(ctx, "plugins_read_by_pkg", func(q orm.Querier) {
		q.SQL(sqlPluginsReadPluginModelByPackage, args)
		q.Bind(func(bind orm.Scanner) error {
			m := PluginModel{}
			if e := bind.Scan(&m.Package, &m.Version, &m.Hash, &m.Active, &m.Meta, &m.CreatedAt, &m.UpdatedAt); e != nil {
				return e
			}
			result = append(result, m)
			return nil
		})
	})
	if err != nil {
		return nil, err
	}
	return result, nil
}

const sqlPluginsReadPluginModelByVersion = `SELECT "pkg", "ver", "hash", "active", "meta", "created_at", "updated_at"
			 FROM "plugins"
			 WHERE "ver" = ANY($1);
`

func (v *RepositoryModels) ReadPluginModelByVersion(
	ctx context.Context, args ...string,
) ([]PluginModel, error) {
	result := make([]PluginModel, 0, 2)
	err := v.orm.Tag(v.rtag).Query(ctx, "plugins_read_by_ver", func(q orm.Querier) {
		q.SQL(sqlPluginsReadPluginModelByVersion, args)
		q.Bind(func(bind orm.Scanner) error {
			m := PluginModel{}
			if e := bind.Scan(&m.Package, &m.Version, &m.Hash, &m.Active, &m.Meta, &m.CreatedAt, &m.UpdatedAt); e != nil {
				return e
			}
			result = append(result, m)
			return nil
		})
	})
	if err != nil {
		return nil, err
	}
	return result, nil
}

const sqlPluginsReadPluginModelByHash = `SELECT "pkg", "ver", "hash", "active", "meta", "created_at", "updated_at"
			 FROM "plugins"
			 WHERE "hash" = ANY($1);
`

func (v *RepositoryModels) ReadPluginModelByHash(
	ctx context.Context, args ...string,
) ([]PluginModel, error) {
	result := make([]PluginModel, 0, 2)
	err := v.orm.Tag(v.rtag).Query(ctx, "plugins_read_by_hash", func(q orm.Querier) {
		q.SQL(sqlPluginsReadPluginModelByHash, args)
		q.Bind(func(bind orm.Scanner) error {
			m := PluginModel{}
			if e := bind.Scan(&m.Package, &m.Version, &m.Hash, &m.Active, &m.Meta, &m.CreatedAt, &m.UpdatedAt); e != nil {
				return e
			}
			result = append(result, m)
			return nil
		})
	})
	if err != nil {
		return nil, err
	}
	return result, nil
}

const sqlPluginsReadPluginModelByActive = `SELECT "pkg", "ver", "hash", "active", "meta", "created_at", "updated_at"
			 FROM "plugins"
			 WHERE "active" = ANY($1);
`

func (v *RepositoryModels) ReadPluginModelByActive(
	ctx context.Context, args ...bool,
) ([]PluginModel, error) {
	result := make([]PluginModel, 0, 2)
	err := v.orm.Tag(v.rtag).Query(ctx, "plugins_read_by_active", func(q orm.Querier) {
		q.SQL(sqlPluginsReadPluginModelByActive, args)
		q.Bind(func(bind orm.Scanner) error {
			m := PluginModel{}
			if e := bind.Scan(&m.Package, &m.Version, &m.Hash, &m.Active, &m.Meta, &m.CreatedAt, &m.UpdatedAt); e != nil {
				return e
			}
			result = append(result, m)
			return nil
		})
	})
	if err != nil {
		return nil, err
	}
	return result, nil
}

const sqlEnvsCreateEnvModel = `INSERT INTO "envs" ("plugin_id", "key", "value", "default_value", "desc", "created_at", "updated_at") 
			VALUES ($1, $2, $3, $4, $5, $6, $7) 
			RETURNING ("id");
`

func (v *RepositoryModels) CreateEnvModel(ctx context.Context, m *EnvModel) error {
	m.CreatedAt = time.Now()
	m.UpdatedAt = time.Now()

	return v.orm.Tag(v.wtag).Query(ctx, "envs_create", func(q orm.Querier) {
		q.SQL(
			sqlEnvsCreateEnvModel,
			m.PluginId, m.Key, m.Value, m.Default, m.Desc, m.CreatedAt, m.UpdatedAt,
		)
		q.Bind(func(bind orm.Scanner) error {
			return bind.Scan(&m.Id)
		})
	})
}

const sqlEnvsUpdateEnvModel = `UPDATE "envs" SET 
			"plugin_id" = $1, "key" = $2, "value" = $3, "default_value" = $4, "desc" = $5, "created_at" = $6, "updated_at" = $7
			 WHERE "id" = $8;
`

func (v *RepositoryModels) UpdateEnvModel(ctx context.Context, m *EnvModel) error {
	m.UpdatedAt = time.Now()

	return v.orm.Tag(v.wtag).Exec(ctx, "envs_update", func(e orm.Executor) {
		e.SQL(sqlEnvsUpdateEnvModel)
		e.Params(m.PluginId, m.Key, m.Value, m.Default, m.Desc, m.CreatedAt, m.UpdatedAt, m.Id)
	})
}

const sqlEnvsDeleteEnvModel = `DELETE FROM "envs"
			 WHERE "id" = $1;
`

func (v *RepositoryModels) DeleteEnvModel(ctx context.Context, pk int64) error {
	return v.orm.Tag(v.wtag).Exec(ctx, "envs_delete", func(e orm.Executor) {
		e.SQL(sqlEnvsDeleteEnvModel)
		e.Params(pk)
	})
}

const sqlEnvsReadEnvModelAll = `SELECT "plugin_id", "key", "value", "default_value", "desc", "created_at", "updated_at"
			 FROM "envs";
`

func (v *RepositoryModels) ReadEnvModelAll(ctx context.Context) ([]EnvModel,
	error) {
	result := make([]EnvModel, 0, 2)
	err := v.orm.Tag(v.rtag).Query(ctx, "envs_read_all", func(q orm.Querier) {
		q.SQL(sqlEnvsReadEnvModelAll)
		q.Bind(func(bind orm.Scanner) error {
			m := EnvModel{}
			if e := bind.Scan(&m.PluginId, &m.Key, &m.Value, &m.Default, &m.Desc, &m.CreatedAt, &m.UpdatedAt); e != nil {
				return e
			}
			result = append(result, m)
			return nil
		})
	})
	if err != nil {
		return nil, err
	}
	return result, nil
}

const sqlEnvsReadEnvModelById = `SELECT "plugin_id", "key", "value", "default_value", "desc", "created_at", "updated_at"
			 FROM "envs"
			 WHERE "id" = ANY($1);
`

func (v *RepositoryModels) ReadEnvModelById(
	ctx context.Context, args ...int64,
) ([]EnvModel, error) {
	result := make([]EnvModel, 0, 2)
	err := v.orm.Tag(v.rtag).Query(ctx, "envs_read_by_id", func(q orm.Querier) {
		q.SQL(sqlEnvsReadEnvModelById, args)
		q.Bind(func(bind orm.Scanner) error {
			m := EnvModel{}
			if e := bind.Scan(&m.PluginId, &m.Key, &m.Value, &m.Default, &m.Desc, &m.CreatedAt, &m.UpdatedAt); e != nil {
				return e
			}
			result = append(result, m)
			return nil
		})
	})
	if err != nil {
		return nil, err
	}
	return result, nil
}

const sqlEnvsReadEnvModelByPluginId = `SELECT "plugin_id", "key", "value", "default_value", "desc", "created_at", "updated_at"
			 FROM "envs"
			 WHERE "plugin_id" = ANY($1);
`

func (v *RepositoryModels) ReadEnvModelByPluginId(
	ctx context.Context, args ...int64,
) ([]EnvModel, error) {
	result := make([]EnvModel, 0, 2)
	err := v.orm.Tag(v.rtag).Query(ctx, "envs_read_by_plugin_id", func(q orm.Querier) {
		q.SQL(sqlEnvsReadEnvModelByPluginId, args)
		q.Bind(func(bind orm.Scanner) error {
			m := EnvModel{}
			if e := bind.Scan(&m.PluginId, &m.Key, &m.Value, &m.Default, &m.Desc, &m.CreatedAt, &m.UpdatedAt); e != nil {
				return e
			}
			result = append(result, m)
			return nil
		})
	})
	if err != nil {
		return nil, err
	}
	return result, nil
}

const sqlEnvsReadEnvModelByKey = `SELECT "plugin_id", "key", "value", "default_value", "desc", "created_at", "updated_at"
			 FROM "envs"
			 WHERE "key" = ANY($1);
`

func (v *RepositoryModels) ReadEnvModelByKey(
	ctx context.Context, args ...string,
) ([]EnvModel, error) {
	result := make([]EnvModel, 0, 2)
	err := v.orm.Tag(v.rtag).Query(ctx, "envs_read_by_key", func(q orm.Querier) {
		q.SQL(sqlEnvsReadEnvModelByKey, args)
		q.Bind(func(bind orm.Scanner) error {
			m := EnvModel{}
			if e := bind.Scan(&m.PluginId, &m.Key, &m.Value, &m.Default, &m.Desc, &m.CreatedAt, &m.UpdatedAt); e != nil {
				return e
			}
			result = append(result, m)
			return nil
		})
	})
	if err != nil {
		return nil, err
	}
	return result, nil
}

const sqlEnvsReadEnvModelByValue = `SELECT "plugin_id", "key", "value", "default_value", "desc", "created_at", "updated_at"
			 FROM "envs"
			 WHERE "value" = ANY($1);
`

func (v *RepositoryModels) ReadEnvModelByValue(
	ctx context.Context, args ...string,
) ([]EnvModel, error) {
	result := make([]EnvModel, 0, 2)
	err := v.orm.Tag(v.rtag).Query(ctx, "envs_read_by_value", func(q orm.Querier) {
		q.SQL(sqlEnvsReadEnvModelByValue, args)
		q.Bind(func(bind orm.Scanner) error {
			m := EnvModel{}
			if e := bind.Scan(&m.PluginId, &m.Key, &m.Value, &m.Default, &m.Desc, &m.CreatedAt, &m.UpdatedAt); e != nil {
				return e
			}
			result = append(result, m)
			return nil
		})
	})
	if err != nil {
		return nil, err
	}
	return result, nil
}

const sqlEnvsReadEnvModelByDefault = `SELECT "plugin_id", "key", "value", "default_value", "desc", "created_at", "updated_at"
			 FROM "envs"
			 WHERE "default_value" = ANY($1);
`

func (v *RepositoryModels) ReadEnvModelByDefault(
	ctx context.Context, args ...string,
) ([]EnvModel, error) {
	result := make([]EnvModel, 0, 2)
	err := v.orm.Tag(v.rtag).Query(ctx, "envs_read_by_default_value", func(q orm.Querier) {
		q.SQL(sqlEnvsReadEnvModelByDefault, args)
		q.Bind(func(bind orm.Scanner) error {
			m := EnvModel{}
			if e := bind.Scan(&m.PluginId, &m.Key, &m.Value, &m.Default, &m.Desc, &m.CreatedAt, &m.UpdatedAt); e != nil {
				return e
			}
			result = append(result, m)
			return nil
		})
	})
	if err != nil {
		return nil, err
	}
	return result, nil
}

const sqlEnvsReadEnvModelByDesc = `SELECT "plugin_id", "key", "value", "default_value", "desc", "created_at", "updated_at"
			 FROM "envs"
			 WHERE "desc" = ANY($1);
`

func (v *RepositoryModels) ReadEnvModelByDesc(
	ctx context.Context, args ...string,
) ([]EnvModel, error) {
	result := make([]EnvModel, 0, 2)
	err := v.orm.Tag(v.rtag).Query(ctx, "envs_read_by_desc", func(q orm.Querier) {
		q.SQL(sqlEnvsReadEnvModelByDesc, args)
		q.Bind(func(bind orm.Scanner) error {
			m := EnvModel{}
			if e := bind.Scan(&m.PluginId, &m.Key, &m.Value, &m.Default, &m.Desc, &m.CreatedAt, &m.UpdatedAt); e != nil {
				return e
			}
			result = append(result, m)
			return nil
		})
	})
	if err != nil {
		return nil, err
	}
	return result, nil
}
