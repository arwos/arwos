// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package manifest

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4ef6ea8bDecodeGoArwosOrgArwosSdkManifest(in *jlexer.Lexer, out *Menu) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "group":
			out.Group = string(in.String())
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4ef6ea8bEncodeGoArwosOrgArwosSdkManifest(out *jwriter.Writer, in Menu) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"group\":"
		out.RawString(prefix[1:])
		out.String(string(in.Group))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Menu) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4ef6ea8bEncodeGoArwosOrgArwosSdkManifest(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Menu) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4ef6ea8bEncodeGoArwosOrgArwosSdkManifest(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Menu) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4ef6ea8bDecodeGoArwosOrgArwosSdkManifest(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Menu) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4ef6ea8bDecodeGoArwosOrgArwosSdkManifest(l, v)
}
func easyjson4ef6ea8bDecodeGoArwosOrgArwosSdkManifest1(in *jlexer.Lexer, out *Manifest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "package":
			out.Package = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "author":
			out.Author = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "type":
			out.Type = Type(in.Uint64())
		case "links":
			if in.IsNull() {
				in.Skip()
				out.Links = nil
			} else {
				in.Delim('[')
				if out.Links == nil {
					if !in.IsDelim(']') {
						out.Links = make([]Link, 0, 2)
					} else {
						out.Links = []Link{}
					}
				} else {
					out.Links = (out.Links)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Link
					(v1).UnmarshalEasyJSON(in)
					out.Links = append(out.Links, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "menu":
			(out.Menu).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4ef6ea8bEncodeGoArwosOrgArwosSdkManifest1(out *jwriter.Writer, in Manifest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"package\":"
		out.RawString(prefix)
		out.String(string(in.Package))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Type))
	}
	{
		const prefix string = ",\"links\":"
		out.RawString(prefix)
		if in.Links == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Links {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"menu\":"
		out.RawString(prefix)
		(in.Menu).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Manifest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4ef6ea8bEncodeGoArwosOrgArwosSdkManifest1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Manifest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4ef6ea8bEncodeGoArwosOrgArwosSdkManifest1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Manifest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4ef6ea8bDecodeGoArwosOrgArwosSdkManifest1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Manifest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4ef6ea8bDecodeGoArwosOrgArwosSdkManifest1(l, v)
}
func easyjson4ef6ea8bDecodeGoArwosOrgArwosSdkManifest2(in *jlexer.Lexer, out *Link) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.Url = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4ef6ea8bEncodeGoArwosOrgArwosSdkManifest2(out *jwriter.Writer, in Link) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Link) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4ef6ea8bEncodeGoArwosOrgArwosSdkManifest2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Link) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4ef6ea8bEncodeGoArwosOrgArwosSdkManifest2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Link) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4ef6ea8bDecodeGoArwosOrgArwosSdkManifest2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Link) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4ef6ea8bDecodeGoArwosOrgArwosSdkManifest2(l, v)
}
